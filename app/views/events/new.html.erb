<div class="new-event-header">Create a New Event</div>

<%= form_for @event do |f| %>
  <div class="new-event-form">
    <ul class="error-messages">
      <% @event.errors.full_messages.each do |error| %>
      <li><%= error %></li>
      <% end %>
    </ul>
    <p>
      <%= f.label :name %>
      <%= f.text_field :name %>
    </p>
    <p>
      <%= f.label :activity_id  %>
      <%= f.collection_select :activity_id, @activities, :id, :name, include_blank: true %>
    </p>
    <p>
      <%= f.label :description %>
      <%= f.text_area :description %>
    </p>
    <p>
      <%= f.label :date %>
      <%= f.datetime_select :date %>
    </p>
    <p>
      <%= f.label :address %>
      <%= f.text_field :address, :placeholder =>"(i.e., '351 W Hubbard St., Chicago, IL' or 'Millenium Park, Chicago, IL)'", :onFocus => "geolocate()" %>
    </p>
    <p>
      <%= f.submit %>
    </p>
  </div>
<% end %>

<script>

  // Prevents form from submitting when pressing enter
  $('.new-event-form').on('keyup keypress', function(e) {
    var keyCode = e.keyCode || e.which;
    if (keyCode === 13) {
      e.preventDefault();
      return false;
    }
  });
// This example displays an address form, using the autocomplete feature
// of the Google Places API to help users fill in the information.
// <input id="event_address" name="event[address]" placeholder="Enter your address" onFocus="geolocate()" type="text"></input>


// This example requires the Places library. Include the libraries=places
// parameter when you first load the API. For example:
// <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

  var placeSearch, autocomplete;
  // var componentForm = {
  //   street_number: 'short_name',
  //   route: 'long_name',
  //   locality: 'long_name',
  //   administrative_area_level_1: 'short_name',
  //   country: 'long_name',
  //   postal_code: 'short_name'
  // };

  function initAutocomplete() {
    // Create the autocomplete object, restricting the search to geographical
    // location types.
    autocomplete = new google.maps.places.Autocomplete(
        /** @type {!HTMLInputElement} */(document.getElementById('event_address')),
        {types: ['geocode']});

    // When the user selects an address from the dropdown, populate the address
    // fields in the form.
    // autocomplete.addListener('place_changed', fillInAddress);
  }

  // function fillInAddress() {
  //   // Get the place details from the autocomplete object.
  //   var place = autocomplete.getPlace();

  //   for (var component in componentForm) {
  //     document.getElementById(component).value = '';
  //     document.getElementById(component).disabled = false;
  //   }

  //   // Get each component of the address from the place details
  //   // and fill the corresponding field on the form.
  //   for (var i = 0; i < place.address_components.length; i++) {
  //     var addressType = place.address_components[i].types[0];
  //     if (componentForm[addressType]) {
  //       var val = place.address_components[i][componentForm[addressType]];
  //       document.getElementById(addressType).value = val;
  //     }
  //   }
  // }

  // Bias the autocomplete object to the user's geographical location,
  // as supplied by the browser's 'navigator.geolocation' object.
  function geolocate() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        var geolocation = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        var circle = new google.maps.Circle({
          center: geolocation,
          radius: position.coords.accuracy
        });
        autocomplete.setBounds(circle.getBounds());
      });
    }
  }

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDAvBDiolWNKT2Nn0wteaKxxKPQbk8ocjI&libraries=places&callback=initAutocomplete" async defer>
</script>
